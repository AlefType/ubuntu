
feature locl { # Localized Forms
 # Latin
 language AZE  exclude_dflt; # Azeri
    sub i by i.locl;
 language TRK  exclude_dflt; # Turkish
    sub i by i.locl;
 language CRT  exclude_dflt; # Crimean Tatar
    sub i by i.locl;
script cyrl; # Cyrillic
 language BGR  exclude_dflt; # Bulgarian
     sub afii10066 by afii10066.locl;
 language MKD  exclude_dflt; # Macedonian
     sub afii10066 by afii10066.locl;
 language SRB  exclude_dflt; # Serbian
     sub afii10066 by afii10066.locl;
} locl;

feature numr { # Numerators
 # Latin
 	lookup numr_text{
 	 sub @FIG_DFLT by @FIG_NUM;
	 sub @FIG_DNOM by @FIG_NUM;
	 sub @FIG_SUPS by @FIG_NUM;
	 sub @FIG_SINF by @FIG_NUM;
	 }numr_text;
 language AZE ; # Azeri
 language TRK ; # Turkish
 language MOL ; # Moldavian
 language ROM ; # Romanian
 language CRT ; # Crimean Tatar
 
 script grek; # Greek
 		lookup numr_text;
 script cyrl; # Cyrillic
 		lookup numr_text;
 language SRB ; # Serbian
 language MKD ; # Macedonian
 language BGR ; # Bulgarian 
} numr;

feature ordn {
  sub a by ordfeminine;
  sub o by ordmasculine;
} ordn;

feature dnom { # Denominators
 # Latin
  lookup dnom_text{
	sub @FIG_DFLT by @FIG_DNOM;
	sub @FIG_NUM by @FIG_DNOM;
	sub @FIG_SUPS by @FIG_DNOM;
	sub @FIG_SINF by @FIG_DNOM;
	} dnom_text;
 language AZE ; # Azeri
 language TRK ; # Turkish
 language MOL ; # Moldavian
 language ROM ; # Romanian
 language CRT ; # Crimean Tatar
 
 script grek; # Greek
 		lookup dnom_text;
 script cyrl; # Cyrillic
 		lookup dnom_text;
 language SRB ; # Serbian
 language MKD ; # Macedonian
 language BGR ; # Bulgarian 

} dnom;

feature sups { # Superscript
 # Latin
 lookup sups_text{
	sub @FIG_DFLT by @FIG_SUPS;
	sub @FIG_NUM by @FIG_SUPS;
	sub @FIG_DNOM by @FIG_SUPS;
	sub @FIG_SINF by @FIG_SUPS;
 } sups_text;
 language AZE ; # Azeri
 language TRK ; # Turkish
 language MOL ; # Moldavian
 language ROM ; # Romanian
 language CRT ; # Crimean Tatar
 
 script grek; # Greek
 		lookup sups_text;
 script cyrl; # Cyrillic
 		lookup sups_text;
 language SRB ; # Serbian
 language MKD ; # Macedonian
 language BGR ; # Bulgarian 

} sups;

feature subs { # Subscripts
# Latin
lookup sub1 {
	sub @FIG_DFLT by @FIG_SINF;
	sub @FIG_NUM by @FIG_SINF;
	sub @FIG_DNOM by @FIG_SINF;
	sub @FIG_SUPS by @FIG_SINF;
} sub1;
 language AZE ; # Azeri
 language TRK ; # Turkish
 language MOL ; # Moldavian
 language ROM ; # Romanian
 language CRT ; # Crimean Tatar
 
 script grek; # Greek
 		lookup sub1;
 script cyrl; # Cyrillic
 		lookup sub1;
 language SRB ; # Serbian
 language MKD ; # Macedonian
 language BGR ; # Bulgarian 
} subs;

feature sinf { # Scientific Inferiors
# Latin
lookup sin1 {
	sub @FIG_DFLT by @FIG_SINF;
	sub @FIG_NUM by @FIG_SINF;
	sub @FIG_DNOM by @FIG_SINF;
	sub @FIG_SUPS by @FIG_SINF;
} sin1;
 language AZE ; # Azeri
 language TRK ; # Turkish
 language MOL ; # Moldavian
 language ROM ; # Romanian
 language CRT ; # Crimean Tatar
 
 script grek; # Greek
 		lookup sin1;
 script cyrl; # Cyrillic
 		lookup sin1;
 language SRB ; # Serbian
 language MKD ; # Macedonian
 language BGR ; # Bulgarian 

} sinf;

feature frac { # Fractions
#Monospaced cannot have both precomposed and dynamic frations in the same feature.
#We just use precomposed here, dynamic fractions are placed in Alternate Fractions(afrc).
 # Latin
lookup frac12 {
	sub [slash uni2215] by fraction;
} frac12;

lookup frac13 {
	sub @ONE fraction @FOUR by onequarter;
	sub @ONE fraction @TWO by onehalf;
	sub @THREE fraction @FOUR by threequarters;

	sub @ONE fraction @THREE by onethird;
	sub @TWO fraction @THREE by twothirds;

	sub @ONE fraction @FIVE by onefifth;
	sub @TWO fraction @FIVE by twofifths;
	sub @THREE fraction @FIVE by threefifths;
	sub @FOUR fraction @FIVE by fourfifths;

	sub @ONE fraction @SIX by onesixth;
	sub @FIVE fraction @SIX by fivesixths;

	sub @ONE fraction @EIGHT by oneeighth;
	sub @THREE fraction @EIGHT by threeeighths;
	sub @FIVE fraction @EIGHT by fiveeighths;
	sub @SEVEN fraction @EIGHT by seveneighths;

	sub @ONE fraction @SEVEN by oneseventh;
	sub @TWO fraction @SEVEN by twosevenths;
	sub @THREE fraction @SEVEN by threesevenths;
	sub @FOUR fraction @SEVEN by foursevenths;
	sub @FIVE fraction @SEVEN by fivesevenths;
	sub @SIX fraction @SEVEN by sixsevenths;

	sub @ONE fraction @NINE by oneninth;
	sub @TWO fraction @NINE by twoninths;
	sub @FOUR fraction @NINE by fourninths;
	sub @FIVE fraction @NINE by fiveninths;
	sub @SEVEN fraction @NINE by sevenninths;
	sub @EIGHT fraction @NINE by eightninths;
} frac13;

 language AZE ; # Azeri
 language TRK ; # Turkish
 language MOL ; # Moldavian
 language ROM ; # Romanian
 language CRT ; # Crimean Tatar
 script grek; # Greek
	lookup frac12;
	lookup frac13;
 script cyrl; # Cyrillic
	lookup frac12;
	lookup frac13;
 language SRB ; # Serbian
 language MKD ; # Macedonian
 language BGR ; # Bulgarian  
} frac;

feature afrc {# Alternate Fractions
#Monospaced cannot have both precomposed and dynamic frations in the same feature.
#We have Dynamic Fractions here, precomposed fractions are placed in Fractions(frac).

lookup afrc1 {
	sub [slash uni2215] by fraction;
} afrc1;

lookup afrc2 {
	sub @FIG_DFLT by @FIG_NUM;
	sub @FIG_DNOM by @FIG_NUM;
  sub @FIG_SUPS by @FIG_NUM;
	sub @FIG_SINF by @FIG_NUM;
} afrc2;

lookup afrc3 {	
	sub [fraction @FIG_DNOM] @FIG_NUM' by @FIG_DNOM;
} afrc3;


 language AZE ; # Azeri
 language TRK ; # Turkish
 language MOL ; # Moldavian
 language ROM ; # Romanian
 language CRT ; # Crimean Tatar
 script grek; # Greek
	lookup afrc1;
	lookup afrc2;
	lookup afrc3;
 script cyrl; # Cyrillic
	lookup afrc1;
	lookup afrc2;
	lookup afrc3;
 language SRB ; # Serbian
 language MKD ; # Macedonian
 language BGR ; # Bulgarian  

} afrc;

feature ss02 {# Alternate Fractions
#Monospaced cannot have both precomposed and dynamic frations in the same feature.
#We have Dynamic Fractions here, precomposed fractions are placed in Fractions(frac).

lookup afrc1;

lookup afrc2;

lookup afrc3;

 language AZE ; # Azeri
 language TRK ; # Turkish
 language MOL ; # Moldavian
 language ROM ; # Romanian
 language CRT ; # Crimean Tatar
 script grek; # Greek
	lookup afrc1;
	lookup afrc2;
	lookup afrc3;
 script cyrl; # Cyrillic
	lookup afrc1;
	lookup afrc2;
	lookup afrc3;
 language SRB ; # Serbian
 language MKD ; # Macedonian
 language BGR ; # Bulgarian  

} ss02;

feature case { # Case-Sensitive Forms
 # Latin
	lookup case_add {
		sub dotlessj by J;
		sub longs by S;
		sub @case1 by @case2;
	} case_add;
	
	lookup case_dflt {
  		sub @LC_LETT by @UC_LETT;
	} case_dflt;
 language AZE ; # Azeri
 language TRK ; # Turkish
 language CRT ; # Crimean Tatar
 script grek; # Greek
	lookup case_add;
	lookup case_dflt;
 script cyrl; # Cyrillic
	lookup case_add;
	lookup case_dflt;
 language SRB ; # Serbian
 language MKD ; # Macedonian
 language BGR ; # Bulgarian 
} case;

feature ss01 { # Greek Stylistic Alternates
 # Latin
lookup salt01 {
	sub @AlphaSub by @AlphaSub.alt;
} salt01;

lookup salt02 {
	sub @EtaSub by @EtaSub.alt;
} salt02;

lookup salt03 {
	sub @OmegaSub by @OmegaSub.alt;
} salt03;

 script grek; # Greek
lookup salt01;
lookup salt02;
lookup salt03;

} ss01;

feature salt { # Stylistic Alternates
 # Latin
lookup salt01;
#	sub @AlphaSub by @AlphaSub.alt; 

lookup salt02;
#	sub @EtaSub by @EtaSub.alt;


lookup salt03;
#	sub @OmegaSub by @OmegaSub.alt;


 script grek; # Greek
lookup salt01;
lookup salt02;
lookup salt03;


} salt;
